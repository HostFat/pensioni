<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Previsione Sostenibilità Sistema Pensionistico Italiano</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
            color: #333;
        }
        .container {
            max-width: 800px;
            margin: auto;
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        h1, h2 {
            color: #0056b3;
        }
        #sustainability-index {
            font-size: 2em;
            font-weight: bold;
            text-align: center;
            padding: 20px;
            border-radius: 5px;
            margin-top: 20px;
        }
        .data-point {
            margin-bottom: 10px;
        }
        .loader {
            border: 5px solid #f3f3f3;
            border-top: 5px solid #3498db;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 2s linear infinite;
            margin: 20px auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .disclaimer {
            font-size: 0.8em;
            color: #666;
            margin-top: 30px;
            border-top: 1px solid #ccc;
            padding-top: 15px;
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>Previsione Sostenibilità del Sistema Pensionistico Italiano</h1>
        <p>Questa pagina analizza la sostenibilità del sistema pensionistico italiano utilizzando gli ultimi dati disponibili da ISTAT. Un "Indice di Sostenibilità Pensionistica" semplificato viene calcolato per fornire un'indicazione sintetica della situazione.</p>

        <div id="loader" class="loader"></div>

        <div id="dashboard" style="display:none;">
            <h2>Dati Chiave</h2>
            <div class="data-point">
                <strong>Rapporto di Dipendenza Strutturale:</strong> <span id="dependency-ratio"></span>
                <p><small>(Popolazione 65+ anni / Popolazione 20-64 anni)</small></p>
            </div>
            <div class="data-point">
                <strong>Spesa Pensionistica su PIL:</strong> <span id="pension-spending-gdp"></span>%
            </div>
            <div class="data-point">
                <strong>Ultimo dato PIL (annuale, miliardi di €):</strong> <span id="gdp"></span>
            </div>

            <h2>Indice di Sostenibilità Pensionistica</h2>
            <p>Questo indice combina il rapporto di dipendenza e la spesa pensionistica in percentuale del PIL. Un valore più alto indica una maggiore pressione sul sistema.</p>
            <div id="sustainability-index"></div>
            <div id="sustainability-text" style="text-align: center; font-style: italic;"></div>
        </div>

        <div class="disclaimer">
            <p><strong>Disclaimer:</strong></p>
            <ul>
                <li>Questa è una simulazione semplificata e non una previsione ufficiale.</li>
                <li>L' "Indice di Sostenibilità Pensionistica" è un indicatore non scientifico creato a scopo dimostrativo.</li>
                <li>I dati sono recuperati tramite le API ISTAT e si basano sulle ultime rilevazioni disponibili, che potrebbero non essere in tempo reale.</li>
                <li>La sostenibilità di un sistema pensionistico è un fenomeno complesso influenzato da numerosi altri fattori non inclusi in questo modello.</li>
            </ul>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const loader = document.getElementById('loader');
            const dashboard = document.getElementById('dashboard');

            // Funzione per recuperare i dati dall'API ISTAT SDMX
            async function fetchData(dataflow) {
                const url = `http://sdmx.istat.it/SDMXWS/rest/data/${dataflow}/`;
                try {
                    const response = await fetch(url);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const dataText = await response.text();
                    return parseSdmx(dataText);
                } catch (error) {
                    console.error(`Errore nel recupero dei dati per ${dataflow}:`, error);
                    return null;
                }
            }

            // Funzione molto semplificata per il parsing di una risposta SDMX-XML
            function parseSdmx(xmlString) {
                const parser = new DOMParser();
                const xmlDoc = parser.parseFromString(xmlString, "text/xml");
                const series = xmlDoc.getElementsByTagName("generic:Series");
                const data = [];

                for (let i = 0; i < series.length; i++) {
                    const seriesKey = series[i].getElementsByTagName("generic:SeriesKey")[0];
                    const attributes = series[i].getElementsByTagName("generic:Attributes")[0];
                    const obs = series[i].getElementsByTagName("generic:Obs");

                    let record = {};
                    const seriesValues = seriesKey.getElementsByTagName("generic:Value");
                    for (let j = 0; j < seriesValues.length; j++) {
                        record[seriesValues[j].getAttribute("id")] = seriesValues[j].getAttribute("value");
                    }

                    const obsValues = obs[0].getElementsByTagName("generic:ObsValue")[0];
                    record['value'] = parseFloat(obsValues.getAttribute("value"));

                    data.push(record);
                }
                return data;
            }

            // Calcolo del rapporto di dipendenza
            async function getDependencyRatio() {
                // ISTAT dataflow per la popolazione residente per sesso, età e stato civile al 1° gennaio
                const populationData = await fetchData('IT1/22_289');
                if (!populationData) return { ratio: 'N/A', year: 'N/A' };

                const latestYear = Math.max(...populationData.map(d => parseInt(d.TIME_PERIOD.substring(0, 4))));

                const yearData = populationData.filter(d => d.TIME_PERIOD.startsWith(latestYear.toString()));

                let pop20to64 = 0;
                let pop65plus = 0;

                yearData.forEach(d => {
                    const age = parseInt(d.ETA.substring(1)); // ETA è tipo "Y20", "Y65", etc.
                    if (age >= 20 && age <= 64) {
                        pop20to64 += d.value;
                    } else if (age >= 65) {
                        pop65plus += d.value;
                    }
                });

                const dependencyRatio = (pop65plus / pop20to64) * 100;
                return {
                    ratio: dependencyRatio.toFixed(2),
                    year: latestYear
                };
            }

            // Recupero della spesa pensionistica in rapporto al PIL
            async function getPensionSpendingToGdp() {
                // ISTAT dataflow per la spesa delle amministrazioni pubbliche per funzione
                const spendingData = await fetchData('IT1/47_83');
                if (!spendingData) return { percentage: 'N/A', year: 'N/A' };
                
                // Filtriamo per la funzione "Vecchiaia" (CP09)
                const pensionSpending = spendingData.filter(d => d.COFOG_XAP === 'CP09');
                const latestYear = Math.max(...pensionSpending.map(d => parseInt(d.TIME_PERIOD.substring(0, 4))));
                const latestSpending = pensionSpending.find(d => d.TIME_PERIOD.startsWith(latestYear.toString()));

                return {
                    percentage: latestSpending ? latestSpending.value.toFixed(2) : 'N/A',
                    year: latestYear
                };
            }
            
            // Recupero del PIL
            async function getGdp() {
                // ISTAT dataflow per i principali aggregati economici
                const gdpData = await fetchData('IT1/DCCN_TNA');
                 if (!gdpData) return { value: 'N/A', year: 'N/A' };
                
                // Filtriamo per il PIL ai prezzi di mercato (B1G) in milioni di euro (M)
                const gdp = gdpData.filter(d => d.CONTO === 'B1G' && d.PREZZI === 'V' && d.ADJUSTMENT === 'N' && d.OPERATORE_S1 === 'S1' );
                const latestYear = Math.max(...gdp.map(d => parseInt(d.TIME_PERIOD.substring(0, 4))));
                const latestGdp = gdp.find(d => d.TIME_PERIOD.startsWith(latestYear.toString()));
                
                return {
                    value: latestGdp ? (latestGdp.value / 1000).toFixed(2) : 'N/A', // Converti in miliardi
                    year: latestYear
                };
            }


            // Funzione principale per eseguire tutto
            async function run() {
                const [dependency, spending, gdp] = await Promise.all([
                    getDependencyRatio(),
                    getPensionSpendingToGdp(),
                    getGdp()
                ]);

                document.getElementById('dependency-ratio').textContent = `${dependency.ratio}% (Anno: ${dependency.year})`;
                document.getElementById('pension-spending-gdp').textContent = `${spending.percentage} (Anno: ${spending.year})`;
                document.getElementById('gdp').textContent = `${gdp.value} (Anno: ${gdp.year})`;

                // Calcolo dell'Indice di Sostenibilità
                const depRatio = parseFloat(dependency.ratio);
                const spendRatio = parseFloat(spending.percentage);
                let sustainabilityIndex = 0;
                let sustainabilityText = "Dati non sufficienti per il calcolo.";
                let color = "#333";

                if (!isNaN(depRatio) && !isNaN(spendRatio)) {
                    // Formula semplificata: (Rapporto Dipendenza * 0.6) + (Spesa/PIL * 0.4)
                    sustainabilityIndex = (depRatio * 0.6) + (spendRatio * 0.4);
                    sustainabilityIndex = sustainabilityIndex.toFixed(2);
                    
                    if (sustainabilityIndex < 35) {
                        sustainabilityText = "Sostenibilità Sotto Controllo";
                        color = "green";
                    } else if (sustainabilityIndex >= 35 && sustainabilityIndex < 45) {
                        sustainabilityText = "Situazione da Monitorare";
                        color = "orange";
                    } else {
                        sustainabilityText = "Criticità Elevata";
                        color = "red";
                    }
                }

                const indexElement = document.getElementById('sustainability-index');
                indexElement.textContent = sustainabilityIndex;
                indexElement.style.color = color;
                document.getElementById('sustainability-text').textContent = sustainabilityText;
                
                loader.style.display = 'none';
                dashboard.style.display = 'block';
            }

            run();
        });
    </script>

</body>
</html>
